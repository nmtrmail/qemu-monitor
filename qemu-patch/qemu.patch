diff -ruN qemu.origin/gdbstub.c qemu.new/gdbstub.c
--- qemu.origin/gdbstub.c	2014-08-01 12:50:57.042295172 +0800
+++ qemu.new/gdbstub.c	2014-08-01 11:51:05.634252702 +0800
@@ -33,6 +33,7 @@
 #include "sysemu/char.h"
 #include "sysemu/sysemu.h"
 #include "exec/gdbstub.h"
+#include "../target-arm/fetcher.h"
 #endif
 
 #define MAX_PACKET_LENGTH 4096
@@ -1249,6 +1250,7 @@
 
 send_packet:
     put_packet(s, buf);
+    fetcher_trans(cpu);
 
     /* disable single step if it was enabled */
     cpu_single_step(cpu, 0);
@@ -1672,6 +1674,12 @@
     CharDriverState *chr = NULL;
     CharDriverState *mon_chr;
 
+    /* Fetcher */
+    printf("Connect to qemu-monitor...");
+    fetcher_start();
+    printf("Success!\n");
+    /* End of Fetcher */
+
     if (!device)
         return -1;
     if (strcmp(device, "none") != 0) {
diff -ruN qemu.origin/target-arm/fetcher.c qemu.new/target-arm/fetcher.c
--- qemu.origin/target-arm/fetcher.c	1970-01-01 08:00:00.000000000 +0800
+++ qemu.new/target-arm/fetcher.c	2014-08-01 12:50:12.682294647 +0800
@@ -0,0 +1,105 @@
+#include <stdio.h>
+#include <string.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <sys/un.h>
+#include <stddef.h>
+
+
+#include "fetcher.h"
+#include "packet.h"
+#include "cpu.h"
+
+#define ADDRESS "fetcher"
+
+static int ns = 0;
+
+void fetcher_start(void)
+{
+        int len;
+        struct sockaddr_un saun;
+        if ((ns = socket(AF_UNIX, SOCK_STREAM, 0)) < 0) {
+		perror("Socket error!");
+		exit(1);
+        }
+
+        saun.sun_family = AF_UNIX;
+        strcpy(saun.sun_path, ADDRESS);
+
+        len = sizeof(saun.sun_family) + strlen(saun.sun_path);
+
+        if (connect(ns, (struct sockaddr *)&saun, len) < 0) {
+		perror("Can not connect to qemu-monitor, run qemu-monitor first\n");
+		exit(1);
+        }
+}
+
+static void copy_register(FetcherPacket *dst, CPUState *cs)
+{
+	int i;
+	ARMCPU *cpu = ARM_CPU(cs);
+	CPUARMState *env = &cpu->env;
+
+	/* Copy System Control Registers */
+	dst->MPIDR_EL1 = cs->cpu_index;
+	dst->CCSIDR_EL1 = cpu->ccsidr[env->cp15.c0_cssel];
+	dst->CSSELR_EL1 = env->cp15.c0_cssel;
+	dst->DCZID_EL0 = cpu->dcz_blocksize | (1 << 4);
+	dst->ESR_EL1 = env->cp15.esr_el[1];
+	dst->FAR_EL1 = env->cp15.far_el1;
+	dst->VBAR_EL1 = env->cp15.vbar_el[1];
+	dst->ISR_EL1 = 0;
+	if(cs->interrupt_request & 0x0002) { // XXX: Hardcode CPU_INTERRUPT_HARD
+		dst->ISR_EL1 |= CPSR_I;
+	}
+	if(cs->interrupt_request & 0x0010) { // XXX: Hardcode CPU_INTERRUPT_FIQ
+		dst->ISR_EL1 |= CPSR_F;
+	}
+	dst->VBAR_EL2 = env->cp15.vbar_el[2];
+	dst->VBAR_EL3 = env->cp15.vbar_el[3];
+	dst->SCTLR_EL1 = env->cp15.c1_sys;
+	dst->TTBR0_EL1 = env->cp15.ttbr0_el1;
+	dst->TTBR1_EL1 = env->cp15.ttbr1_el1;
+	dst->TCR_EL1 = env->cp15.c2_control;
+	dst->MAIR_EL1 = env->cp15.mair_el1;
+	dst->CONTEXTIDR_EL1 = env->cp15.contextidr_el1;
+	dst->CPACR_EL1 = env->cp15.c1_coproc;
+
+	dst->PMCR_EL0 = env->cp15.c9_pmcr;
+	dst->PMCNTENSET_EL0 = env->cp15.c9_pmcnten;
+	dst->PMCNTENCLR_EL0 = env->cp15.c9_pmcnten;
+	dst->PMXEVTYPER_EL0 = env->cp15.c9_pmxevtyper;
+	dst->PMUSERENR_EL0 = env->cp15.c9_pmuserenr;
+	dst->PMINTENSET_EL1 = env->cp15.c9_pminten;
+	dst->PMINTENCLR_EL1 = env->cp15.c9_pminten;
+
+	dst->CNTKCTL_EL1 = env->cp15.c14_cntkctl;
+	dst->CNTFRQ_EL0 = env->cp15.c14_cntfrq;
+	dst->CNTP_CTL_EL0 = env->cp15.c14_timer[GTIMER_PHYS].ctl;
+	dst->CNTP_CVAL_EL0 = env->cp15.c14_timer[GTIMER_PHYS].cval;
+	dst->CNTV_CTL_EL0 = env->cp15.c14_timer[GTIMER_VIRT].ctl;
+	dst->CNTV_CVAL_EL0 = env->cp15.c14_timer[GTIMER_VIRT].cval;
+
+	dst->TPIDR_EL0 = env->cp15.tpidr_el0;
+	dst->TPIDR_EL1 = env->cp15.tpidr_el1;
+	dst->TPIDRRO_EL0 = env->cp15.tpidrro_el0;
+
+	/* Copy xregs */
+	dst->pc = env->pc;
+	for(i = 0; i < 32; i++) {
+		dst->xregs[i] = env->xregs[i];
+	}
+
+	/* Copy SPSR */
+	dst->spsr.spsr_t = (env->NF & 0x80000000) | ((env->ZF == 0) << 30)
+	            | (env->CF << 29) | ((env->VF & 0x80000000) >> 3)
+		    | env->pstate | env->daif;
+}
+
+void fetcher_trans(CPUState *cs)
+{
+	static FetcherPacket packet;
+	copy_register(&packet, cs);
+
+	send(ns, &packet, sizeof(FetcherPacket), 0);
+}
diff -ruN qemu.origin/target-arm/fetcher.h qemu.new/target-arm/fetcher.h
--- qemu.origin/target-arm/fetcher.h	1970-01-01 08:00:00.000000000 +0800
+++ qemu.new/target-arm/fetcher.h	2014-08-01 11:51:20.162252874 +0800
@@ -0,0 +1,9 @@
+#ifndef FETCHER_H
+#define FETCHER_H
+
+#include "cpu.h"
+
+void fetcher_start(void);
+void fetcher_trans(CPUState *cs);
+
+#endif
diff -ruN qemu.origin/target-arm/Makefile.objs qemu.new/target-arm/Makefile.objs
--- qemu.origin/target-arm/Makefile.objs	2014-08-01 12:50:52.074295113 +0800
+++ qemu.new/target-arm/Makefile.objs	2014-08-01 11:51:20.162252874 +0800
@@ -9,3 +9,4 @@
 obj-y += gdbstub.o
 obj-$(TARGET_AARCH64) += cpu64.o translate-a64.o helper-a64.o gdbstub64.o
 obj-y += crypto_helper.o
+obj-y += fetcher.o
diff -ruN qemu.origin/target-arm/packet.h qemu.new/target-arm/packet.h
--- qemu.origin/target-arm/packet.h	1970-01-01 08:00:00.000000000 +0800
+++ qemu.new/target-arm/packet.h	2014-08-01 11:51:20.162252874 +0800
@@ -0,0 +1,80 @@
+#ifndef __PACKET_H_
+#define __PACKET_H_
+
+#include <stdint.h>
+#include <stddef.h>
+
+/* Packet format from QEMU */
+typedef struct FetcherPacket {
+	/* AArch64 System Registers */
+	uint32_t MPIDR_EL1; /* cpu->cpu_index */
+	uint64_t CCSIDR_EL1; /* cpu->ccsidr[env->cp15.c0_cssel] */
+	uint32_t CSSELR_EL1; /* env->cp15.c10_cssel */
+	uint32_t DCZID_EL0; /* cpu->dcz_blocksize, check target-arm/helper.c:1842 */
+	uint32_t ESR_EL1; /* env->cp15.esr_el[1] */
+	uint64_t FAR_EL1; /* env->cp15.far_el1 */
+	uint64_t VBAR_EL1; /* env->cp15.vbar_el[1] */
+	uint32_t ISR_EL1; /* check target-arm/helper.c:699 */
+	uint64_t VBAR_EL2; /* env->cp15.vbar_el[2] */
+	uint64_t VBAR_EL3; /* env->cp15.vbar_el[3] */
+	uint32_t SCTLR_EL1; /* env->cp15.c1_sys */
+	uint64_t TTBR0_EL1; /* env->cp15.ttbr0_el1 */
+	uint64_t TTBR1_EL1; /* env->cp15.ttbr1_el1 */
+	uint64_t TCR_EL1; /* env->cp15.c2_control */
+	uint64_t MAIR_EL1; /* env->cp15.mair_el1 */
+	uint32_t CONTEXTIDR_EL1; /* env->cp15.contextidr_el1 */
+	uint32_t CPACR_EL1; /* env->cp15.c1_coproc */
+
+	uint32_t PMCR_EL0; /* env->cp15.c9_pmcr */
+	uint32_t PMCNTENSET_EL0; /* env->cp15.c9_pmcnten */
+	uint32_t PMCNTENCLR_EL0; /* env->cp15.c9_pmcnten */
+	uint32_t PMXEVTYPER_EL0; /* env->cp15.c9_pmxevtyper */
+	uint32_t PMUSERENR_EL0; /* env->cp15.c9_pmuserenr */
+	uint32_t PMINTENSET_EL1; /* env->cp15.c9_pminten */
+	uint32_t PMINTENCLR_EL1; /* env->cp15.c9_pminten */
+
+	uint32_t CNTKCTL_EL1; /* env->cp15.c14_cntkctl */
+	uint64_t CNTFRQ_EL0; /* env->cp15.c14_cntfrq */
+	uint32_t CNTP_CTL_EL0; /* env->cp15.c14_timer[GTIMER_PHYS].ctl */
+	uint64_t CNTP_CVAL_EL0; /* env->cp15.c14_timer[GTIMER_PHYS].cval */
+	uint32_t CNTV_CTL_EL0; /* env->cp15.c14_timer[GTIMER_VIRT].ctl */
+	uint64_t CNTV_CVAL_EL0; /* env->cp15.c14_timer[GTIMER_VIRT].cval */
+
+	uint64_t TPIDR_EL0; /* env->cp15.tpidr_el0 */
+	uint64_t TPIDR_EL1; /* env->cp15.tpidr_el1 */
+	uint64_t TPIDRRO_EL0; /* env->cp15.tpidrro_el0 */
+
+	/* General Purpose Registers */
+	uint64_t xregs[32];
+	uint64_t pc;
+
+	/* For AArch64 from AArch64, not support from AArch32 */
+	union {
+		struct {
+			uint32_t N : 1;
+			uint32_t Z : 1;
+			uint32_t C : 1;
+			uint32_t V : 1;
+			uint32_t RES0_1 : 4;
+			uint32_t RES0_2 : 2;
+			uint32_t SS : 1;
+			uint32_t IL : 1;
+			uint32_t RES0_3 : 10;
+			uint32_t D : 1;
+			uint32_t A : 1;
+			uint32_t I : 1;
+			uint32_t F : 1;
+			uint32_t RES0_4 : 1;
+			/* M[4], Execution state */
+			uint32_t Mb4 : 1;
+			/* M[3:0] */
+			uint32_t Mb3 : 1;
+			uint32_t Mb2 : 1;
+			uint32_t Mb1 : 1;
+			uint32_t Mb0 : 1;
+		} spsr_s;
+		uint32_t spsr_t;
+	} spsr;
+} FetcherPacket;
+
+#endif
